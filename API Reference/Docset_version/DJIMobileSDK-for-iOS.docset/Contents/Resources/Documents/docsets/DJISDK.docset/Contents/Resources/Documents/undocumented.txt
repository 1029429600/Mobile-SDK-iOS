DJIAirLinkBaseTypes.h
	typedef struct DJILBAirLinkAllChannelSignalStrengths
    DJILBAirLinkAllChannelSignalStrengths
DJIFlightController.h
	typedef struct DJINoFlyZone DJINoFlyZone
DJIFlightControllerBaseTypes.h
	typedef struct DJIAttitude DJIAttitude
	typedef struct DJIVirtualStickFlightControlData DJIVirtualStickFlightControlData
DJIFlightControllerCurrentState.h
	typedef struct DJIFlightControllerSmartGoHomeStatus
    DJIFlightControllerSmartGoHomeStatus
DJIGoHomeStatus.h
	@interface DJIGoHomeStatus : NSObject

    /**
     *  The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining.
     *  This time includes landing the aircraft.
     */
@property (nonatomic, assign) NSUInteger remainingFlightTime;
    
    /**
     *  The estimated time, in seconds, needed for the aircraft to go home from its
     *  current location.
     */
@property (nonatomic, assign) NSUInteger timeNeededToGoHome;
    
    /**
     *  The estimated time, in seconds, needed for the aircraft to land from its current
     *  height. The time calculated will be for the aircraft to land, moving
     *  straight down, from its current height.
     */
@property (nonatomic, assign) NSUInteger timeNeededToLandFromCurrentHeight;
    
    /**
     *  The estimated battery percentage, in the range of [0 - 100], needed for the aircraft
     *  to go home and have 10% battery remaining. This includes landing of the aircraft.
     */
@property (nonatomic, assign) NSUInteger batteryPercentageNeededToGoHome;
    
    /**
     *  The battery percentage, in the range of [0 - 100], needed for the aircraft
     *  to land from its current height. The battery percentage needed will be for
     *  the aircraft to land, moving straight down, from its current height.
     */
@property (nonatomic, assign) NSUInteger batteryPercentageNeededToLandFromCurrentHeight;
    
    /**
     *  The maximum radius, in meters, an aircraft can fly from its home location
     *  and still make it all the way back home based on certain factors including
     *  altitude, distance, battery, etc. If the aircraft goes out farther than the
     *  max radius, it will fly as far back home as it can and land.
     */
@property (nonatomic, assign) float maxRadiusAircraftCanFlyAndGoHome;
    
    /**
     *  Returns whether the aircraft is requesting to go home. If the value of
     *  `aircraftShouldGoHome` is YES and the user does not respond after 10 seconds,
     *  the aircraft will automatically go back to its home location. This can be canceled
     *  at any time with the `cancelGoHome` method (which will also clear `aircraftShouldGoHome`). It is recommended
     *  that an alert view is shown to the user when `aircraftShouldGoHome` returns YES.
     *  During this time, the Remote Controller will beep.
     *
     *  The flight controller calculates whether the aircraft should go home based
     *  on the aircraft's altitude, distance, battery, etc.
     *
     *  The two main situations in which `aircraftShouldGoHome` will return YES are if the
     *  aircraft's battery is too low or if the aircraft has flown too far away.
     */
@property (nonatomic, assign) BOOL aircraftShouldGoHome;

@end
DJIMobileRemoteControllerKeys.h
	DJI_API_EXTERN NSString *const DJIMobileRemoteControllerComponent
DJIRemoteControllerBaseTypes.h
	typedef struct DJIRemoteControllerModeState DJIRemoteControllerModeState
	typedef struct DJIRCControlChannel DJIRCControlChannel
	typedef struct DJIRCControlMode DJIRCControlMode
	typedef struct DJIRCControlPermission DJIRCControlPermission
	typedef struct DJIRCGimbalControlSpeed DJIRCGimbalControlSpeed
	typedef struct DJIRCBatteryInfo DJIRCBatteryInfo
	typedef struct DJIRCGpsTime DJIRCGpsTime
	typedef struct DJIRCGPSData DJIRCGPSData
	typedef struct DJIRCHardwareRightWheel DJIRCHardwareRightWheel
	typedef struct DJIRCHardwareLeftWheel DJIRCHardwareLeftWheel
	typedef struct DJIRCHardwareTransformationSwitch
    DJIRCHardwareTransformationSwitch
	typedef struct DJIRCHardwareFlightModeSwitch DJIRCHardwareFlightModeSwitch
	typedef struct DJIRCHardwareButton DJIRCHardwareButton
	typedef struct DJIRCHardwareJoystick DJIRCHardwareJoystick
	typedef struct DJIRCFiveDButton DJIRCFiveDButton
	typedef struct DJIRCHardwareState DJIRCHardwareState
	typedef struct DJIRCRemoteFocusState DJIRCRemoteFocusState
DJITapFlyMission.h
	typedef struct DJIVector DJIVector
DJICameraSettingsDef.h
	typedef struct DJICameraPhotoAEBParam DJICameraPhotoAEBParam
	typedef struct DJICameraPhotoIntervalParam DJICameraPhotoIntervalParam
	typedef struct DJICameraExposureParameters DJICameraExposureParameters
	typedef struct DJICameraThermalProfile DJICameraThermalProfile
	typedef struct DJICameraThermalAreaTemperatureAggregations
    DJICameraThermalAreaTemperatureAggregations
	typedef struct DJICameraThermalExternalSceneSettings
    DJICameraThermalExternalSceneSettings
	typedef struct DJICameraOpticalZoomSpec DJICameraOpticalZoomSpec
DJIGimbalBaseTypes.h
	typedef struct DJIGimbalAttitude DJIGimbalAttitude
	typedef struct DJIGimbalAngleRotation DJIGimbalAngleRotation
	typedef struct DJIGimbalSpeedRotation DJIGimbalSpeedRotation
